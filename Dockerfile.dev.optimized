FROM python:3.12-slim as base

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
ENV PYTHONPATH=/app
ENV UV_CACHE_DIR=/opt/uv-cache

# Set work directory
WORKDIR /app

# Install system dependencies in a single layer
RUN apt-get update \
    && apt-get install -y --no-install-recommends \
    postgresql-client \
    build-essential \
    libpq-dev \
    git \
    curl \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Install uv from official Docker image
COPY --from=ghcr.io/astral-sh/uv:latest /uv /bin/uv

# Create cache directory for uv
RUN mkdir -p /opt/uv-cache && chmod 777 /opt/uv-cache

# Development stage
FROM base as development

# Copy only dependency files first for better caching
COPY pyproject.toml uv.lock* ./

# Install dependencies with cache mount
RUN --mount=type=cache,target=/opt/uv-cache \
    uv sync --extra dev --no-install-project

# Create non-root user early
RUN adduser --disabled-password --gecos '' appuser

# Create necessary directories and set permissions
RUN mkdir -p /app/logs /app/media /app/static \
    && chown -R appuser:appuser /app \
    && chmod -R 755 /app

# Switch to non-root user
USER appuser

# Copy the rest of the application
# This will be cached unless your app code changes
COPY --chown=appuser:appuser . .

# Install the project in development mode
RUN --mount=type=cache,target=/opt/uv-cache,uid=1000 \
    uv sync --extra dev

# Expose port
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health/ || exit 1

# Default command for development
CMD ["uv", "run", "python", "manage.py", "runserver", "0.0.0.0:8000"]
